// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// TokenABI is the input ABI used to generate the binding from.
const TokenABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zeroGenPepes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pepeNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"R\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxHaltDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"bytes32\"}],\"name\":\"claimUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ZERO_GEN_PEPES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cozyCoolDowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PREMINE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pepes\",\"outputs\":[{\"name\":\"master\",\"type\":\"address\"},{\"name\":\"canCozyAgain\",\"type\":\"uint64\"},{\"name\":\"generation\",\"type\":\"uint64\"},{\"name\":\"father\",\"type\":\"uint64\"},{\"name\":\"mother\",\"type\":\"uint64\"},{\"name\":\"coolDownIndex\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"mother\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"father\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pepeId\",\"type\":\"uint256\"}],\"name\":\"PepeBorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pepeId\",\"type\":\"uint256\"}],\"name\":\"PepeNamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"UserNamed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"setMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seed\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"minePepe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pepePremine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint256\"},{\"name\":\"_father\",\"type\":\"uint256\"},{\"name\":\"_pepeReceiver\",\"type\":\"address\"}],\"name\":\"cozyTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setPepeName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_beginPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"transferAndAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_cozyCandidate\",\"type\":\"uint256\"},{\"name\":\"_candidateAsFather\",\"type\":\"bool\"}],\"name\":\"approveAndBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_cozyCandidate\",\"type\":\"uint256\"},{\"name\":\"_candidateAsFather\",\"type\":\"bool\"},{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"approveAndBuyAffiliated\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"}],\"name\":\"getPepe\",\"outputs\":[{\"name\":\"master\",\"type\":\"address\"},{\"name\":\"genotype\",\"type\":\"uint256[2]\"},{\"name\":\"canCozyAgain\",\"type\":\"uint64\"},{\"name\":\"generation\",\"type\":\"uint64\"},{\"name\":\"father\",\"type\":\"uint256\"},{\"name\":\"mother\",\"type\":\"uint256\"},{\"name\":\"pepeName\",\"type\":\"bytes32\"},{\"name\":\"coolDownIndex\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pepeId\",\"type\":\"uint256\"}],\"name\":\"getCozyAgain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenBin is the compiled bytecode used for deploying new contracts.
const TokenBin = `0x6249d400600655610260604052603c6080908152607860a05261012c60c05261038460e05261070861010052610a8c61012052610e1061014052611c2061016052613840610180526170806101a05261e1006101c052620151806101e0526202a30061020052620546006102205262093a80610240526200008590600790600f62000261565b50600b805460ff19166001179055348015620000a057600080fd5b50620000ab62000304565b506000805433600160a060020a03199182161782556040805160e0810182528381528151808301835284815260208082018690528201908152918101849052606081018490526080810184905260a0810184905260c08101849052600a8054600181018083559190955281517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860059096029586018054909516600160a060020a03909116178455915190939192849290916200018d917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9019060026200034b565b5060408201516003820180546060850151608086015160a087015167ffffffffffffffff1990931667ffffffffffffffff95861617604060020a608060020a031916680100000000000000009286169290920291909117608060020a60c060020a0319167001000000000000000000000000000000009185169190910217600160c060020a03167801000000000000000000000000000000000000000000000000939091169290920291909117905560c0909101516004909101805460ff191660ff90921691909117905550620003e99050565b600283019183908215620002f25791602002820160005b83821115620002be57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030262000278565b8015620002f05782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620002be565b505b50620003009291506200038a565b5090565b604080516101008101909152600081526020810162000322620003b1565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b82600281019282156200037c579160200282015b828111156200037c5782518255916020019190600101906200035f565b5062000300929150620003cc565b620003ae91905b808211156200030057805463ffffffff1916815560010162000391565b90565b60408051808201825290600290829080388339509192915050565b620003ae91905b80821115620003005760008155600101620003d3565b612a1080620003f96000396000f3006080604052600436106102505763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461025557806306fdde03146102a0578063081812fc1461032a578063095ea7b31461035e5780630b1714fd146103845780631051db34146103ab57806313aa48bf146103c057806318160ddd146103f65780631977bd681461040b57806321a7643014610423578063228dff131461043857806323b872dd1461045357806327e235e31461047d5780632df1f1b61461049e5780632e1a9ffe146104b65780632f745c5914610552578063349dc3291461057657806342842e0e1461058b5780634980e1be146105b5578063583c2e7b146105e057806362bc63c4146105f55780636352211e1461062a5780636c88beeb1461064257806370a082311461065a578063715018a61461067b57806371e68cad1461069057806373a01b75146106a85780637d4061e6146106bd57806382cf2116146106d55780638da5cb5b1461070c57806395d89b41146107215780639742ca46146107365780639d18e40514610757578063a22cb4651461077e578063a9059cbb146107a4578063b3ecf7a6146107c8578063b88d4fde146107dd578063b9b8af0b14610816578063c29338cf1461082b578063cb3e64fd14610852578063d346658b14610867578063e23a778514610898578063e985e9c5146108b7578063edf53886146108de578063ee66875a146108ff578063f2fde38b14610914578063f73bda7214610935578063fb139a211461094a578063fb1fad50146109b0575b600080fd5b34801561026157600080fd5b5061028c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166109c8565b604080519115158252519081900360200190f35b3480156102ac57600080fd5b506102b5610a6b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ef5781810151838201526020016102d7565b50505050905090810190601f16801561031c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033657600080fd5b50610342600435610aa2565b60408051600160a060020a039092168252519081900360200190f35b34801561036a57600080fd5b50610382600160a060020a0360043516602435610abd565b005b34801561039057600080fd5b5061028c600160a060020a0360043581169060243516610b77565b3480156103b757600080fd5b5061028c610b97565b3480156103cc57600080fd5b506103e4600435600160a060020a0360243516610ba0565b60408051918252519081900360200190f35b34801561040257600080fd5b506103e4610bf8565b34801561041757600080fd5b50610382600435610c2b565b34801561042f57600080fd5b506103e4610d27565b34801561044457600080fd5b5061028c600435602435610d2d565b34801561045f57600080fd5b5061028c600160a060020a0360043581169060243516604435610dd1565b34801561048957600080fd5b506103e4600160a060020a0360043516610ef6565b3480156104aa57600080fd5b506103e4600435610f08565b3480156104c257600080fd5b506104ce600435610f1a565b60408051600160a060020a038a168152906020820190899080838360005b838110156105045781810151838201526020016104ec565b50505067ffffffffffffffff9a8b169390910192835250509590961660208601526040808601949094526060850192909252608084015260ff1660a0830152519081900360c0019350915050f35b34801561055e57600080fd5b506103e4600160a060020a0360043516602435611012565b34801561058257600080fd5b5061034261106d565b34801561059757600080fd5b50610382600160a060020a036004358116906024351660443561107c565b3480156105c157600080fd5b506105ca6110ad565b6040805160ff9092168252519081900360200190f35b3480156105ec57600080fd5b506103e46110b2565b34801561060157600080fd5b5061060d6004356110b8565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561063657600080fd5b506103426004356110ed565b34801561064e57600080fd5b5061034260043561111e565b34801561066657600080fd5b506103e4600160a060020a0360043516611139565b34801561068757600080fd5b50610382611154565b34801561069c57600080fd5b506103826004356111c0565b3480156106b457600080fd5b506103e4611296565b3480156106c957600080fd5b5061034260043561129c565b3480156106e157600080fd5b50610382600435600160a060020a036024351660443560643567ffffffffffffffff608435166112b7565b34801561071857600080fd5b506103426113b4565b34801561072d57600080fd5b506102b56113c3565b34801561074257600080fd5b50610382600160a060020a03600435166113fa565b610382600435600160a060020a036024358116906044359060643515159060843516611456565b34801561078a57600080fd5b50610382600160a060020a03600435166024351515611547565b3480156107b057600080fd5b5061028c600160a060020a0360043516602435611602565b3480156107d457600080fd5b506103e4611660565b3480156107e957600080fd5b50610382600160a060020a0360048035821691602480359091169160443591606435908101910135611666565b34801561082257600080fd5b5061028c6116b9565b34801561083757600080fd5b5061028c600435602435600160a060020a03604435166116c2565b34801561085e57600080fd5b50610382611bd2565b34801561087357600080fd5b5061087f600435611c07565b6040805163ffffffff9092168252519081900360200190f35b610382600435600160a060020a03602435166044356064351515611c34565b3480156108c357600080fd5b5061028c600160a060020a0360043581169060243516611d3b565b3480156108ea57600080fd5b506103e4600160a060020a0360043516611d69565b34801561090b57600080fd5b506103e4611d7b565b34801561092057600080fd5b50610382600160a060020a0360043516611d81565b34801561094157600080fd5b506103e4611da4565b34801561095657600080fd5b50610962600435611da9565b60408051600160a060020a03909716875267ffffffffffffffff9586166020880152938516868501529184166060860152909216608084015260ff90911660a0830152519081900360c00190f35b3480156109bc57600080fd5b50610382600435611e3b565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1983161480610a5557507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b15610a6257506001610a66565b5060005b919050565b60408051808201909152600b81527f43727970746f2050657065000000000000000000000000000000000000000000602082015281565b6000908152600e6020526040902054600160a060020a031690565b60045460ff1615610acd57600080fd5b600a80548291339183908110610adf57fe5b6000918252602090912060059091020154600160a060020a031614610b0357600080fd5b6000828152600e6020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03871690811790915582518581529251909233927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505050565b600f60209081526000928352604080842090915290825290205460ff1681565b600b5460ff1681565b60045460009060ff1615610bb357600080fd5b601154600160a060020a03163314610bca57600080fd5b60105461044c11610bda57600080fd5b610bf1610be684611e84565b600080600086611ed1565b9392505050565b60008052600d6020527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee54600a54035b90565b60008054600160a060020a03163314610c4357600080fd5b60045460ff1615610c5357600080fd5b5060005b81811015610d235760105460641015610c6f57600080fd5b610d1a610d0442600a8054905060405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610cd15780518252601f199092019160209182019101610cb2565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209250611e84915050565b6000805481908190600160a060020a0316611ed1565b50600101610c57565b5050565b60105481565b60045460009060ff1615610d4057600080fd5b600a80548491339183908110610d5257fe5b6000918252602090912060059091020154600160a060020a031614610d7657600080fd5b60008481526009602052604090205415610d8f57600080fd5b6000848152600960205260408082208590555185917f5a8858069902ead8e61944d06d7de6818a0dd09b668447431ac1501baa5e8ef891a25060019392505050565b60045460009060ff1615610de457600080fd5b81600a81815481101515610df457fe5b6000918252602090912060059091020154600160a060020a0316331480610e3157506000818152600e6020526040902054600160a060020a031633145b80610e835750600f6000600a83815481101515610e4a57fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b1515610e8e57600080fd5b84600160a060020a0316600a84815481101515610ea757fe5b6000918252602090912060059091020154600160a060020a031614610ecb57600080fd5b600160a060020a0384161515610ee057600080fd5b610eeb858585612190565b506001949350505050565b600d6020526000908152604090205481565b60096020526000908152604090205481565b6000610f2461292c565b6000806000806000806000600a8a815481101515610f3e57fe5b6000918252602090912060059091020180546040805180820191829052600160a060020a039092169b5091925090600183019060029082845b815481526020019060010190808311610f7757505050600384015460009d8e5260096020526040909d20546004909401549b9d929c67ffffffffffffffff8082169d68010000000000000000830482169d50700100000000000000000000000000000000830482169c5078010000000000000000000000000000000000000000000000009092041699509397505060ff909216945092505050565b600160a060020a0382166000908152600d6020526040812054821061103657600080fd5b600160a060020a0383166000908152600c6020526040902080548390811061105a57fe5b9060005260206000200154905092915050565b601154600160a060020a031681565b60045460ff161561108c57600080fd5b6110a88383836020604051908101604052806000815250612248565b505050565b600581565b60065481565b6000600a828154811015156110c957fe5b600091825260209091206005909102016003015467ffffffffffffffff1692915050565b6000600a828154811015156110fe57fe5b6000918252602090912060059091020154600160a060020a031692915050565b600260205260009081526040902054600160a060020a031681565b600160a060020a03166000908152600d602052604090205490565b600054600160a060020a0316331461116b57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260026020526040902054600160a060020a0316156111e257600080fd5b336000908152600160205260409020541561122f5733600090815260016020908152604080832054835260029091529020805473ffffffffffffffffffffffffffffffffffffffff191690555b3360008181526001602090815260408083208590558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff191684179055518392917f43c1ac38b68f3a24742fba8f0826c9fcf340d41f123872fa3175164d117e25af91a350565b61044c81565b600e60205260009081526040902054600160a060020a031681565b60045460009060ff16156112ca57600080fd5b600a805487913391839081106112dc57fe5b6000918252602090912060059091020154600160a060020a03161461130057600080fd5b61130b338789612190565b604080517fd024cd0200000000000000000000000000000000000000000000000000000000815260048101899052602481018790526044810186905267ffffffffffffffff851660648201523360848201529051879350600160a060020a0384169163d024cd029160a480830192600092919082900301818387803b15801561139357600080fd5b505af11580156113a7573d6000803e3d6000fd5b5050505050505050505050565b600054600160a060020a031681565b60408051808201909152600481527f4350455000000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a0316331461141157600080fd5b601154600160a060020a03161561142757600080fd5b6011805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045460ff161561146657600080fd5b600a8054849133918390811061147857fe5b6000918252602090912060059091020154600160a060020a03161461149c57600080fd5b6000848152600e6020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0389811691821790925582517fa6da467c000000000000000000000000000000000000000000000000000000008152600481018b905260248101899052871515604482015233606482015291861660848301529151919263a6da467c92349260a480820193929182900301818588803b15801561139357600080fd5b60045460ff161561155757600080fd5b801561159057336000908152600f60209081526040808320600160a060020a03861684529091529020805460ff191660011790556115bc565b336000908152600f60209081526040808320600160a060020a03861684529091529020805460ff191690555b6040805182151581529051600160a060020a0384169133917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b60045460009060ff161561161557600080fd5b600a8054839133918390811061162757fe5b6000918252602090912060059091020154600160a060020a03161461164b57600080fd5b611656338585612190565b5060019392505050565b60055481565b60045460ff161561167657600080fd5b6116b285858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750612248945050505050565b5050505050565b60045460ff1681565b60008060006116cf61292c565b60045460009060ff16156116e257600080fd5b878714156116ef57600080fd5b600a80543391908a90811061170057fe5b6000918252602090912060059091020154600160a060020a0316148061173c57506000888152600e6020526040902054600160a060020a031633145b8061178e5750600f6000600a8a81548110151561175557fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b151561179957600080fd5b600a8054339190899081106117aa57fe5b6000918252602090912060059091020154600160a060020a031614806117e657506000878152600e6020526040902054600160a060020a031633145b806118385750600f6000600a898154811015156117ff57fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b151561184357600080fd5b600a80548990811061185157fe5b600091825260209091206003600590920201015467ffffffffffffffff16421180156118a75750600a80548890811061188657fe5b600091825260209091206003600590920201015467ffffffffffffffff1642115b15156118b257600080fd5b86600a898154811015156118c257fe5b60009182526020909120600590910201600301547801000000000000000000000000000000000000000000000000900467ffffffffffffffff161480159061194a575086600a8981548110151561191557fe5b6000918252602090912060059091020160030154700100000000000000000000000000000000900467ffffffffffffffff1614155b151561195557600080fd5b87600a8881548110151561196557fe5b60009182526020909120600590910201600301547801000000000000000000000000000000000000000000000000900467ffffffffffffffff16148015906119ed575087600a888154811015156119b857fe5b6000918252602090912060059091020160030154700100000000000000000000000000000000900467ffffffffffffffff1614155b15156119f857600080fd5b600a805488908110611a0657fe5b90600052602060002090600502019350600a88815481101515611a2557fe5b600091825260208083208a8452600e9091526040808420805473ffffffffffffffffffffffffffffffffffffffff199081169091558c8552938190208054909416909355825180840193849052600592909202019450611adb91600187019060029082845b815481526020019060010190808311611a8a575050604080518082019182905293506001890192506002915082845b815481526020019060010190808311611ab9575050600a549250612513915050565b91508260030160089054906101000a900467ffffffffffffffff1660010190508360030160089054906101000a900467ffffffffffffffff1660010167ffffffffffffffff168167ffffffffffffffff161015611b525750600383015468010000000000000000900467ffffffffffffffff166001015b611b5b88612694565b611b6487612694565b600383015467ffffffffffffffff16600a611b82848b8b868c611ed1565b81548110611b8c57fe5b906000526020600020906005020160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019450505050509392505050565b60055460035401421180611bf05750600054600160a060020a031633145b1515611bfb57600080fd5b6004805460ff19169055565b600781600f8110611c1457fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b60045460ff1615611c4457600080fd5b600a80548391339183908110611c5657fe5b6000918252602090912060059091020154600160a060020a031614611c7a57600080fd5b6000838152600e6020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915581517fd3ce71df000000000000000000000000000000000000000000000000000000008152600481018990526024810187905285151560448201523360648201529151909263d3ce71df9234926084808301939282900301818588803b158015611d1b57600080fd5b505af1158015611d2f573d6000803e3d6000fd5b50505050505050505050565b600160a060020a039182166000908152600f6020908152604080832093909416825291909152205460ff1690565b60016020526000908152604090205481565b60035481565b600054600160a060020a03163314611d9857600080fd5b611da18161273b565b50565b606481565b600a805482908110611db757fe5b6000918252602090912060059091020180546003820154600490920154600160a060020a03909116925067ffffffffffffffff80831692680100000000000000008104821692700100000000000000000000000000000000820483169278010000000000000000000000000000000000000000000000009092049091169060ff1686565b600054600160a060020a03163314611e5257600080fd5b60035415611e5f57600080fd5b600654811115611e6e57600080fd5b6005556004805460ff1916600117905542600355565b611e8c61292c565b5060408051808201825260009283527f434f4c4c454354205045504553204f4e2043525950544f50455045532e494f2160209081529183208152918190209082015290565b600080611edc612947565b600267ffffffffffffffff8616049150601c8567ffffffffffffffff161115611f0457600e91505b506040805160e081018252600160a060020a03851681526020810189905260009181019190915267ffffffffffffffff85811660608301819052878216608084015290881660a083015260ff831660c08301521515611f67576010805460010190555b600a8054600180820180845560009390935283517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a86005909302928301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117815560208501519193928592612006917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a90190600261298c565b5060408201516003820180546060850151608086015160a087015167ffffffffffffffff1990931667ffffffffffffffff958616176fffffffffffffffff000000000000000019166801000000000000000092861692909202919091177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000918516919091021777ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000939091169290920291909117905560c0909101516004909101805460ff191660ff90921691909117905503925061210a84846127b8565b828667ffffffffffffffff168867ffffffffffffffff167f160403841b73fe58236181ab476e17f2836a5b4aa8a570d9f1baf4b6ed61a38a60405160405180910390a46040518390600160a060020a038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505095945050505050565b81600a828154811015156121a057fe5b6000918252602080832060059092029091018054600160a060020a039490941673ffffffffffffffffffffffffffffffffffffffff19948516179055838252600e905260409020805490911690556121f8838261283e565b61220282826127b8565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b81600a8181548110151561225857fe5b6000918252602090912060059091020154600160a060020a031633148061229557506000818152600e6020526040902054600160a060020a031633145b806122e75750600f6000600a838154811015156122ae57fe5b60009182526020808320600590920290910154600160a060020a03168352828101939093526040918201812033825290925290205460ff165b15156122f257600080fd5b84600160a060020a0316600a8481548110151561230b57fe5b6000918252602090912060059091020154600160a060020a03161461232f57600080fd5b600160a060020a038416151561234457600080fd5b61234f858585612190565b61235884612924565b156116b25760405180807f6f6e455243373231526563656976656428616464726573732c75696e7432353681526020017f2c62797465732900000000000000000000000000000000000000000000000000815250602701905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684600160a060020a031663f0b9e5ba8786866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612470578181015183820152602001612458565b50505050905090810190601f16801561249d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156124be57600080fd5b505af11580156124d2573d6000803e3d6000fd5b505050506040513d60208110156124e857600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146116b257600080fd5b61251b61292c565b60405190506040810160405281600052426020526040600020612544565b60029190910a900490565b612631565b6000600184161515612559579091905b612564600185612539565b9350600080607f8616612578600788612539565b96508060015b60048410610100831016156125cc57959695600019908101600283900a9182011880891696909617959450607f891692506125ba60078a612539565b9850828201915060018401935061257e565b6001810319945086851686179550886000527f434f4c4c454354205045504553204f4e2043525950544f50455045532e494f21602052602460002060236003206022600220166021600120602060002016161680871896505050505050509392505050565b6020600182160260106002831602600483049250612656838289015184890151612549565b845260208218915060208118905084600052421960205260406000209250612685838289015184890151612549565b60208501525050509392505050565b6000600a828154811015156126a557fe5b60009182526020909120600590910201600481015490915060079060ff16600f81106126cd57fe5b60088104919091015460038301805467ffffffffffffffff1916600790931660049081026101000a90920463ffffffff16420167ffffffffffffffff1692909217909155810154600e60ff9091161015610d2357600401805460ff8082166001011660ff1990911617905550565b600160a060020a038116151561275057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600c60209081526040808320600d909252909120548154811015612805578282828154811015156127f457fe5b60009182526020909120015561281b565b8154600181018355600083815260209020018390555b505050600160a060020a03166000908152600d6020526040902080546001019055565b600160a060020a0382166000908152600c6020526040812090805b83838381548110151561286857fe5b906000526020600020015414151561288557600190910190612859565b83838381548110151561289457fe5b906000526020600020015414156116b25750600160a060020a0384166000908152600d602052604081205460001901908111156128ff5782818154811015156128d957fe5b906000526020600020015483838154811015156128f257fe5b6000918252602090912001555b50505050600160a060020a03166000908152600d602052604090208054600019019055565b6000903b1190565b60408051808201825290600290829080388339509192915050565b604080516101008101909152600081526020810161296361292c565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b82600281019282156129ba579160200282015b828111156129ba57825182559160200191906001019061299f565b506129c69291506129ca565b5090565b610c2891905b808211156129c657600081556001016129d05600a165627a7a72305820d1db06010a768de9e3e90ccd4f3586e6b6dc66d36f6a7e32075428c361de30160029`

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// MAXPREMINE is a free data retrieval call binding the contract method 0xf73bda72.
//
// Solidity: function MAX_PREMINE() constant returns(uint256)
func (_Token *TokenCaller) MAXPREMINE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "MAX_PREMINE")
	return *ret0, err
}

// MAXPREMINE is a free data retrieval call binding the contract method 0xf73bda72.
//
// Solidity: function MAX_PREMINE() constant returns(uint256)
func (_Token *TokenSession) MAXPREMINE() (*big.Int, error) {
	return _Token.Contract.MAXPREMINE(&_Token.CallOpts)
}

// MAXPREMINE is a free data retrieval call binding the contract method 0xf73bda72.
//
// Solidity: function MAX_PREMINE() constant returns(uint256)
func (_Token *TokenCallerSession) MAXPREMINE() (*big.Int, error) {
	return _Token.Contract.MAXPREMINE(&_Token.CallOpts)
}

// MAXZEROGENPEPES is a free data retrieval call binding the contract method 0x73a01b75.
//
// Solidity: function MAX_ZERO_GEN_PEPES() constant returns(uint256)
func (_Token *TokenCaller) MAXZEROGENPEPES(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "MAX_ZERO_GEN_PEPES")
	return *ret0, err
}

// MAXZEROGENPEPES is a free data retrieval call binding the contract method 0x73a01b75.
//
// Solidity: function MAX_ZERO_GEN_PEPES() constant returns(uint256)
func (_Token *TokenSession) MAXZEROGENPEPES() (*big.Int, error) {
	return _Token.Contract.MAXZEROGENPEPES(&_Token.CallOpts)
}

// MAXZEROGENPEPES is a free data retrieval call binding the contract method 0x73a01b75.
//
// Solidity: function MAX_ZERO_GEN_PEPES() constant returns(uint256)
func (_Token *TokenCallerSession) MAXZEROGENPEPES() (*big.Int, error) {
	return _Token.Contract.MAXZEROGENPEPES(&_Token.CallOpts)
}

// R is a free data retrieval call binding the contract method 0x4980e1be.
//
// Solidity: function R() constant returns(uint8)
func (_Token *TokenCaller) R(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "R")
	return *ret0, err
}

// R is a free data retrieval call binding the contract method 0x4980e1be.
//
// Solidity: function R() constant returns(uint8)
func (_Token *TokenSession) R() (uint8, error) {
	return _Token.Contract.R(&_Token.CallOpts)
}

// R is a free data retrieval call binding the contract method 0x4980e1be.
//
// Solidity: function R() constant returns(uint8)
func (_Token *TokenCallerSession) R() (uint8, error) {
	return _Token.Contract.R(&_Token.CallOpts)
}

// AddressToUser is a free data retrieval call binding the contract method 0xedf53886.
//
// Solidity: function addressToUser( address) constant returns(bytes32)
func (_Token *TokenCaller) AddressToUser(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "addressToUser", arg0)
	return *ret0, err
}

// AddressToUser is a free data retrieval call binding the contract method 0xedf53886.
//
// Solidity: function addressToUser( address) constant returns(bytes32)
func (_Token *TokenSession) AddressToUser(arg0 common.Address) ([32]byte, error) {
	return _Token.Contract.AddressToUser(&_Token.CallOpts, arg0)
}

// AddressToUser is a free data retrieval call binding the contract method 0xedf53886.
//
// Solidity: function addressToUser( address) constant returns(bytes32)
func (_Token *TokenCallerSession) AddressToUser(arg0 common.Address) ([32]byte, error) {
	return _Token.Contract.AddressToUser(&_Token.CallOpts, arg0)
}

// Approved is a free data retrieval call binding the contract method 0x7d4061e6.
//
// Solidity: function approved( uint256) constant returns(address)
func (_Token *TokenCaller) Approved(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "approved", arg0)
	return *ret0, err
}

// Approved is a free data retrieval call binding the contract method 0x7d4061e6.
//
// Solidity: function approved( uint256) constant returns(address)
func (_Token *TokenSession) Approved(arg0 *big.Int) (common.Address, error) {
	return _Token.Contract.Approved(&_Token.CallOpts, arg0)
}

// Approved is a free data retrieval call binding the contract method 0x7d4061e6.
//
// Solidity: function approved( uint256) constant returns(address)
func (_Token *TokenCallerSession) Approved(arg0 *big.Int) (common.Address, error) {
	return _Token.Contract.Approved(&_Token.CallOpts, arg0)
}

// ApprovedForAll is a free data retrieval call binding the contract method 0x0b1714fd.
//
// Solidity: function approvedForAll( address,  address) constant returns(bool)
func (_Token *TokenCaller) ApprovedForAll(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "approvedForAll", arg0, arg1)
	return *ret0, err
}

// ApprovedForAll is a free data retrieval call binding the contract method 0x0b1714fd.
//
// Solidity: function approvedForAll( address,  address) constant returns(bool)
func (_Token *TokenSession) ApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Token.Contract.ApprovedForAll(&_Token.CallOpts, arg0, arg1)
}

// ApprovedForAll is a free data retrieval call binding the contract method 0x0b1714fd.
//
// Solidity: function approvedForAll( address,  address) constant returns(bool)
func (_Token *TokenCallerSession) ApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Token.Contract.ApprovedForAll(&_Token.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "balanceOf", _owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_Token *TokenSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(balance uint256)
func (_Token *TokenCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, _owner)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_Token *TokenCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "balances", arg0)
	return *ret0, err
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_Token *TokenSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.Balances(&_Token.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x27e235e3.
//
// Solidity: function balances( address) constant returns(uint256)
func (_Token *TokenCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.Balances(&_Token.CallOpts, arg0)
}

// CozyCoolDowns is a free data retrieval call binding the contract method 0xd346658b.
//
// Solidity: function cozyCoolDowns( uint256) constant returns(uint32)
func (_Token *TokenCaller) CozyCoolDowns(opts *bind.CallOpts, arg0 *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "cozyCoolDowns", arg0)
	return *ret0, err
}

// CozyCoolDowns is a free data retrieval call binding the contract method 0xd346658b.
//
// Solidity: function cozyCoolDowns( uint256) constant returns(uint32)
func (_Token *TokenSession) CozyCoolDowns(arg0 *big.Int) (uint32, error) {
	return _Token.Contract.CozyCoolDowns(&_Token.CallOpts, arg0)
}

// CozyCoolDowns is a free data retrieval call binding the contract method 0xd346658b.
//
// Solidity: function cozyCoolDowns( uint256) constant returns(uint32)
func (_Token *TokenCallerSession) CozyCoolDowns(arg0 *big.Int) (uint32, error) {
	return _Token.Contract.CozyCoolDowns(&_Token.CallOpts, arg0)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_Token *TokenCaller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "getApproved", _tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_Token *TokenSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _Token.Contract.GetApproved(&_Token.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(_tokenId uint256) constant returns(address)
func (_Token *TokenCallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _Token.Contract.GetApproved(&_Token.CallOpts, _tokenId)
}

// GetCozyAgain is a free data retrieval call binding the contract method 0x62bc63c4.
//
// Solidity: function getCozyAgain(_pepeId uint256) constant returns(uint64)
func (_Token *TokenCaller) GetCozyAgain(opts *bind.CallOpts, _pepeId *big.Int) (uint64, error) {
	var (
		ret0 = new(uint64)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "getCozyAgain", _pepeId)
	return *ret0, err
}

// GetCozyAgain is a free data retrieval call binding the contract method 0x62bc63c4.
//
// Solidity: function getCozyAgain(_pepeId uint256) constant returns(uint64)
func (_Token *TokenSession) GetCozyAgain(_pepeId *big.Int) (uint64, error) {
	return _Token.Contract.GetCozyAgain(&_Token.CallOpts, _pepeId)
}

// GetCozyAgain is a free data retrieval call binding the contract method 0x62bc63c4.
//
// Solidity: function getCozyAgain(_pepeId uint256) constant returns(uint64)
func (_Token *TokenCallerSession) GetCozyAgain(_pepeId *big.Int) (uint64, error) {
	return _Token.Contract.GetCozyAgain(&_Token.CallOpts, _pepeId)
}

// GetPepe is a free data retrieval call binding the contract method 0x2e1a9ffe.
//
// Solidity: function getPepe(_pepeId uint256) constant returns(master address, genotype uint256[2], canCozyAgain uint64, generation uint64, father uint256, mother uint256, pepeName bytes32, coolDownIndex uint8)
func (_Token *TokenCaller) GetPepe(opts *bind.CallOpts, _pepeId *big.Int) (struct {
	Master        common.Address
	Genotype      [2]*big.Int
	CanCozyAgain  uint64
	Generation    uint64
	Father        *big.Int
	Mother        *big.Int
	PepeName      [32]byte
	CoolDownIndex uint8
}, error) {
	ret := new(struct {
		Master        common.Address
		Genotype      [2]*big.Int
		CanCozyAgain  uint64
		Generation    uint64
		Father        *big.Int
		Mother        *big.Int
		PepeName      [32]byte
		CoolDownIndex uint8
	})
	out := ret
	err := _Token.contract.Call(opts, out, "getPepe", _pepeId)
	return *ret, err
}

// GetPepe is a free data retrieval call binding the contract method 0x2e1a9ffe.
//
// Solidity: function getPepe(_pepeId uint256) constant returns(master address, genotype uint256[2], canCozyAgain uint64, generation uint64, father uint256, mother uint256, pepeName bytes32, coolDownIndex uint8)
func (_Token *TokenSession) GetPepe(_pepeId *big.Int) (struct {
	Master        common.Address
	Genotype      [2]*big.Int
	CanCozyAgain  uint64
	Generation    uint64
	Father        *big.Int
	Mother        *big.Int
	PepeName      [32]byte
	CoolDownIndex uint8
}, error) {
	return _Token.Contract.GetPepe(&_Token.CallOpts, _pepeId)
}

// GetPepe is a free data retrieval call binding the contract method 0x2e1a9ffe.
//
// Solidity: function getPepe(_pepeId uint256) constant returns(master address, genotype uint256[2], canCozyAgain uint64, generation uint64, father uint256, mother uint256, pepeName bytes32, coolDownIndex uint8)
func (_Token *TokenCallerSession) GetPepe(_pepeId *big.Int) (struct {
	Master        common.Address
	Genotype      [2]*big.Int
	CanCozyAgain  uint64
	Generation    uint64
	Father        *big.Int
	Mother        *big.Int
	PepeName      [32]byte
	CoolDownIndex uint8
}, error) {
	return _Token.Contract.GetPepe(&_Token.CallOpts, _pepeId)
}

// HaltDuration is a free data retrieval call binding the contract method 0xb3ecf7a6.
//
// Solidity: function haltDuration() constant returns(uint256)
func (_Token *TokenCaller) HaltDuration(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "haltDuration")
	return *ret0, err
}

// HaltDuration is a free data retrieval call binding the contract method 0xb3ecf7a6.
//
// Solidity: function haltDuration() constant returns(uint256)
func (_Token *TokenSession) HaltDuration() (*big.Int, error) {
	return _Token.Contract.HaltDuration(&_Token.CallOpts)
}

// HaltDuration is a free data retrieval call binding the contract method 0xb3ecf7a6.
//
// Solidity: function haltDuration() constant returns(uint256)
func (_Token *TokenCallerSession) HaltDuration() (*big.Int, error) {
	return _Token.Contract.HaltDuration(&_Token.CallOpts)
}

// HaltTime is a free data retrieval call binding the contract method 0xee66875a.
//
// Solidity: function haltTime() constant returns(uint256)
func (_Token *TokenCaller) HaltTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "haltTime")
	return *ret0, err
}

// HaltTime is a free data retrieval call binding the contract method 0xee66875a.
//
// Solidity: function haltTime() constant returns(uint256)
func (_Token *TokenSession) HaltTime() (*big.Int, error) {
	return _Token.Contract.HaltTime(&_Token.CallOpts)
}

// HaltTime is a free data retrieval call binding the contract method 0xee66875a.
//
// Solidity: function haltTime() constant returns(uint256)
func (_Token *TokenCallerSession) HaltTime() (*big.Int, error) {
	return _Token.Contract.HaltTime(&_Token.CallOpts)
}

// Halted is a free data retrieval call binding the contract method 0xb9b8af0b.
//
// Solidity: function halted() constant returns(bool)
func (_Token *TokenCaller) Halted(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "halted")
	return *ret0, err
}

// Halted is a free data retrieval call binding the contract method 0xb9b8af0b.
//
// Solidity: function halted() constant returns(bool)
func (_Token *TokenSession) Halted() (bool, error) {
	return _Token.Contract.Halted(&_Token.CallOpts)
}

// Halted is a free data retrieval call binding the contract method 0xb9b8af0b.
//
// Solidity: function halted() constant returns(bool)
func (_Token *TokenCallerSession) Halted() (bool, error) {
	return _Token.Contract.Halted(&_Token.CallOpts)
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_Token *TokenCaller) ImplementsERC721(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "implementsERC721")
	return *ret0, err
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_Token *TokenSession) ImplementsERC721() (bool, error) {
	return _Token.Contract.ImplementsERC721(&_Token.CallOpts)
}

// ImplementsERC721 is a free data retrieval call binding the contract method 0x1051db34.
//
// Solidity: function implementsERC721() constant returns(bool)
func (_Token *TokenCallerSession) ImplementsERC721() (bool, error) {
	return _Token.Contract.ImplementsERC721(&_Token.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_Token *TokenCaller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "isApprovedForAll", _owner, _operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_Token *TokenSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _Token.Contract.IsApprovedForAll(&_Token.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(_owner address, _operator address) constant returns(bool)
func (_Token *TokenCallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _Token.Contract.IsApprovedForAll(&_Token.CallOpts, _owner, _operator)
}

// MaxHaltDuration is a free data retrieval call binding the contract method 0x583c2e7b.
//
// Solidity: function maxHaltDuration() constant returns(uint256)
func (_Token *TokenCaller) MaxHaltDuration(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "maxHaltDuration")
	return *ret0, err
}

// MaxHaltDuration is a free data retrieval call binding the contract method 0x583c2e7b.
//
// Solidity: function maxHaltDuration() constant returns(uint256)
func (_Token *TokenSession) MaxHaltDuration() (*big.Int, error) {
	return _Token.Contract.MaxHaltDuration(&_Token.CallOpts)
}

// MaxHaltDuration is a free data retrieval call binding the contract method 0x583c2e7b.
//
// Solidity: function maxHaltDuration() constant returns(uint256)
func (_Token *TokenCallerSession) MaxHaltDuration() (*big.Int, error) {
	return _Token.Contract.MaxHaltDuration(&_Token.CallOpts)
}

// Miner is a free data retrieval call binding the contract method 0x349dc329.
//
// Solidity: function miner() constant returns(address)
func (_Token *TokenCaller) Miner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "miner")
	return *ret0, err
}

// Miner is a free data retrieval call binding the contract method 0x349dc329.
//
// Solidity: function miner() constant returns(address)
func (_Token *TokenSession) Miner() (common.Address, error) {
	return _Token.Contract.Miner(&_Token.CallOpts)
}

// Miner is a free data retrieval call binding the contract method 0x349dc329.
//
// Solidity: function miner() constant returns(address)
func (_Token *TokenCallerSession) Miner() (common.Address, error) {
	return _Token.Contract.Miner(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Token *TokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Token *TokenSession) Name() (string, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Token *TokenCallerSession) Name() (string, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Token *TokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Token *TokenSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Token *TokenCallerSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(_owner address)
func (_Token *TokenCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "ownerOf", _tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(_owner address)
func (_Token *TokenSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Token.Contract.OwnerOf(&_Token.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(_tokenId uint256) constant returns(_owner address)
func (_Token *TokenCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _Token.Contract.OwnerOf(&_Token.CallOpts, _tokenId)
}

// PepeNames is a free data retrieval call binding the contract method 0x2df1f1b6.
//
// Solidity: function pepeNames( uint256) constant returns(bytes32)
func (_Token *TokenCaller) PepeNames(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "pepeNames", arg0)
	return *ret0, err
}

// PepeNames is a free data retrieval call binding the contract method 0x2df1f1b6.
//
// Solidity: function pepeNames( uint256) constant returns(bytes32)
func (_Token *TokenSession) PepeNames(arg0 *big.Int) ([32]byte, error) {
	return _Token.Contract.PepeNames(&_Token.CallOpts, arg0)
}

// PepeNames is a free data retrieval call binding the contract method 0x2df1f1b6.
//
// Solidity: function pepeNames( uint256) constant returns(bytes32)
func (_Token *TokenCallerSession) PepeNames(arg0 *big.Int) ([32]byte, error) {
	return _Token.Contract.PepeNames(&_Token.CallOpts, arg0)
}

// Pepes is a free data retrieval call binding the contract method 0xfb139a21.
//
// Solidity: function pepes( uint256) constant returns(master address, canCozyAgain uint64, generation uint64, father uint64, mother uint64, coolDownIndex uint8)
func (_Token *TokenCaller) Pepes(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Master        common.Address
	CanCozyAgain  uint64
	Generation    uint64
	Father        uint64
	Mother        uint64
	CoolDownIndex uint8
}, error) {
	ret := new(struct {
		Master        common.Address
		CanCozyAgain  uint64
		Generation    uint64
		Father        uint64
		Mother        uint64
		CoolDownIndex uint8
	})
	out := ret
	err := _Token.contract.Call(opts, out, "pepes", arg0)
	return *ret, err
}

// Pepes is a free data retrieval call binding the contract method 0xfb139a21.
//
// Solidity: function pepes( uint256) constant returns(master address, canCozyAgain uint64, generation uint64, father uint64, mother uint64, coolDownIndex uint8)
func (_Token *TokenSession) Pepes(arg0 *big.Int) (struct {
	Master        common.Address
	CanCozyAgain  uint64
	Generation    uint64
	Father        uint64
	Mother        uint64
	CoolDownIndex uint8
}, error) {
	return _Token.Contract.Pepes(&_Token.CallOpts, arg0)
}

// Pepes is a free data retrieval call binding the contract method 0xfb139a21.
//
// Solidity: function pepes( uint256) constant returns(master address, canCozyAgain uint64, generation uint64, father uint64, mother uint64, coolDownIndex uint8)
func (_Token *TokenCallerSession) Pepes(arg0 *big.Int) (struct {
	Master        common.Address
	CanCozyAgain  uint64
	Generation    uint64
	Father        uint64
	Mother        uint64
	CoolDownIndex uint8
}, error) {
	return _Token.Contract.Pepes(&_Token.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Token *TokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "supportsInterface", interfaceID)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Token *TokenSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Token.Contract.SupportsInterface(&_Token.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Token *TokenCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Token.Contract.SupportsInterface(&_Token.CallOpts, interfaceID)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Token *TokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Token *TokenSession) Symbol() (string, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Token *TokenCallerSession) Symbol() (string, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(tokenId uint256)
func (_Token *TokenCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, _owner common.Address, _index *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "tokenOfOwnerByIndex", _owner, _index)
	return *ret0, err
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(tokenId uint256)
func (_Token *TokenSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _Token.Contract.TokenOfOwnerByIndex(&_Token.CallOpts, _owner, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(_owner address, _index uint256) constant returns(tokenId uint256)
func (_Token *TokenCallerSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _Token.Contract.TokenOfOwnerByIndex(&_Token.CallOpts, _owner, _index)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(total uint256)
func (_Token *TokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(total uint256)
func (_Token *TokenSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(total uint256)
func (_Token *TokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// UserToAddress is a free data retrieval call binding the contract method 0x6c88beeb.
//
// Solidity: function userToAddress( bytes32) constant returns(address)
func (_Token *TokenCaller) UserToAddress(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "userToAddress", arg0)
	return *ret0, err
}

// UserToAddress is a free data retrieval call binding the contract method 0x6c88beeb.
//
// Solidity: function userToAddress( bytes32) constant returns(address)
func (_Token *TokenSession) UserToAddress(arg0 [32]byte) (common.Address, error) {
	return _Token.Contract.UserToAddress(&_Token.CallOpts, arg0)
}

// UserToAddress is a free data retrieval call binding the contract method 0x6c88beeb.
//
// Solidity: function userToAddress( bytes32) constant returns(address)
func (_Token *TokenCallerSession) UserToAddress(arg0 [32]byte) (common.Address, error) {
	return _Token.Contract.UserToAddress(&_Token.CallOpts, arg0)
}

// ZeroGenPepes is a free data retrieval call binding the contract method 0x21a76430.
//
// Solidity: function zeroGenPepes() constant returns(uint256)
func (_Token *TokenCaller) ZeroGenPepes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "zeroGenPepes")
	return *ret0, err
}

// ZeroGenPepes is a free data retrieval call binding the contract method 0x21a76430.
//
// Solidity: function zeroGenPepes() constant returns(uint256)
func (_Token *TokenSession) ZeroGenPepes() (*big.Int, error) {
	return _Token.Contract.ZeroGenPepes(&_Token.CallOpts)
}

// ZeroGenPepes is a free data retrieval call binding the contract method 0x21a76430.
//
// Solidity: function zeroGenPepes() constant returns(uint256)
func (_Token *TokenCallerSession) ZeroGenPepes() (*big.Int, error) {
	return _Token.Contract.ZeroGenPepes(&_Token.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_Token *TokenSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_to address, _tokenId uint256) returns()
func (_Token *TokenTransactorSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, _to, _tokenId)
}

// ApproveAndBuy is a paid mutator transaction binding the contract method 0xe23a7785.
//
// Solidity: function approveAndBuy(_pepeId uint256, _auction address, _cozyCandidate uint256, _candidateAsFather bool) returns()
func (_Token *TokenTransactor) ApproveAndBuy(opts *bind.TransactOpts, _pepeId *big.Int, _auction common.Address, _cozyCandidate *big.Int, _candidateAsFather bool) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approveAndBuy", _pepeId, _auction, _cozyCandidate, _candidateAsFather)
}

// ApproveAndBuy is a paid mutator transaction binding the contract method 0xe23a7785.
//
// Solidity: function approveAndBuy(_pepeId uint256, _auction address, _cozyCandidate uint256, _candidateAsFather bool) returns()
func (_Token *TokenSession) ApproveAndBuy(_pepeId *big.Int, _auction common.Address, _cozyCandidate *big.Int, _candidateAsFather bool) (*types.Transaction, error) {
	return _Token.Contract.ApproveAndBuy(&_Token.TransactOpts, _pepeId, _auction, _cozyCandidate, _candidateAsFather)
}

// ApproveAndBuy is a paid mutator transaction binding the contract method 0xe23a7785.
//
// Solidity: function approveAndBuy(_pepeId uint256, _auction address, _cozyCandidate uint256, _candidateAsFather bool) returns()
func (_Token *TokenTransactorSession) ApproveAndBuy(_pepeId *big.Int, _auction common.Address, _cozyCandidate *big.Int, _candidateAsFather bool) (*types.Transaction, error) {
	return _Token.Contract.ApproveAndBuy(&_Token.TransactOpts, _pepeId, _auction, _cozyCandidate, _candidateAsFather)
}

// ApproveAndBuyAffiliated is a paid mutator transaction binding the contract method 0x9d18e405.
//
// Solidity: function approveAndBuyAffiliated(_pepeId uint256, _auction address, _cozyCandidate uint256, _candidateAsFather bool, _affiliate address) returns()
func (_Token *TokenTransactor) ApproveAndBuyAffiliated(opts *bind.TransactOpts, _pepeId *big.Int, _auction common.Address, _cozyCandidate *big.Int, _candidateAsFather bool, _affiliate common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approveAndBuyAffiliated", _pepeId, _auction, _cozyCandidate, _candidateAsFather, _affiliate)
}

// ApproveAndBuyAffiliated is a paid mutator transaction binding the contract method 0x9d18e405.
//
// Solidity: function approveAndBuyAffiliated(_pepeId uint256, _auction address, _cozyCandidate uint256, _candidateAsFather bool, _affiliate address) returns()
func (_Token *TokenSession) ApproveAndBuyAffiliated(_pepeId *big.Int, _auction common.Address, _cozyCandidate *big.Int, _candidateAsFather bool, _affiliate common.Address) (*types.Transaction, error) {
	return _Token.Contract.ApproveAndBuyAffiliated(&_Token.TransactOpts, _pepeId, _auction, _cozyCandidate, _candidateAsFather, _affiliate)
}

// ApproveAndBuyAffiliated is a paid mutator transaction binding the contract method 0x9d18e405.
//
// Solidity: function approveAndBuyAffiliated(_pepeId uint256, _auction address, _cozyCandidate uint256, _candidateAsFather bool, _affiliate address) returns()
func (_Token *TokenTransactorSession) ApproveAndBuyAffiliated(_pepeId *big.Int, _auction common.Address, _cozyCandidate *big.Int, _candidateAsFather bool, _affiliate common.Address) (*types.Transaction, error) {
	return _Token.Contract.ApproveAndBuyAffiliated(&_Token.TransactOpts, _pepeId, _auction, _cozyCandidate, _candidateAsFather, _affiliate)
}

// ClaimUsername is a paid mutator transaction binding the contract method 0x71e68cad.
//
// Solidity: function claimUsername(_username bytes32) returns()
func (_Token *TokenTransactor) ClaimUsername(opts *bind.TransactOpts, _username [32]byte) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "claimUsername", _username)
}

// ClaimUsername is a paid mutator transaction binding the contract method 0x71e68cad.
//
// Solidity: function claimUsername(_username bytes32) returns()
func (_Token *TokenSession) ClaimUsername(_username [32]byte) (*types.Transaction, error) {
	return _Token.Contract.ClaimUsername(&_Token.TransactOpts, _username)
}

// ClaimUsername is a paid mutator transaction binding the contract method 0x71e68cad.
//
// Solidity: function claimUsername(_username bytes32) returns()
func (_Token *TokenTransactorSession) ClaimUsername(_username [32]byte) (*types.Transaction, error) {
	return _Token.Contract.ClaimUsername(&_Token.TransactOpts, _username)
}

// CozyTime is a paid mutator transaction binding the contract method 0xc29338cf.
//
// Solidity: function cozyTime(_mother uint256, _father uint256, _pepeReceiver address) returns(bool)
func (_Token *TokenTransactor) CozyTime(opts *bind.TransactOpts, _mother *big.Int, _father *big.Int, _pepeReceiver common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "cozyTime", _mother, _father, _pepeReceiver)
}

// CozyTime is a paid mutator transaction binding the contract method 0xc29338cf.
//
// Solidity: function cozyTime(_mother uint256, _father uint256, _pepeReceiver address) returns(bool)
func (_Token *TokenSession) CozyTime(_mother *big.Int, _father *big.Int, _pepeReceiver common.Address) (*types.Transaction, error) {
	return _Token.Contract.CozyTime(&_Token.TransactOpts, _mother, _father, _pepeReceiver)
}

// CozyTime is a paid mutator transaction binding the contract method 0xc29338cf.
//
// Solidity: function cozyTime(_mother uint256, _father uint256, _pepeReceiver address) returns(bool)
func (_Token *TokenTransactorSession) CozyTime(_mother *big.Int, _father *big.Int, _pepeReceiver common.Address) (*types.Transaction, error) {
	return _Token.Contract.CozyTime(&_Token.TransactOpts, _mother, _father, _pepeReceiver)
}

// Halt is a paid mutator transaction binding the contract method 0xfb1fad50.
//
// Solidity: function halt(_duration uint256) returns()
func (_Token *TokenTransactor) Halt(opts *bind.TransactOpts, _duration *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "halt", _duration)
}

// Halt is a paid mutator transaction binding the contract method 0xfb1fad50.
//
// Solidity: function halt(_duration uint256) returns()
func (_Token *TokenSession) Halt(_duration *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Halt(&_Token.TransactOpts, _duration)
}

// Halt is a paid mutator transaction binding the contract method 0xfb1fad50.
//
// Solidity: function halt(_duration uint256) returns()
func (_Token *TokenTransactorSession) Halt(_duration *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Halt(&_Token.TransactOpts, _duration)
}

// MinePepe is a paid mutator transaction binding the contract method 0x13aa48bf.
//
// Solidity: function minePepe(_seed uint256, _receiver address) returns(uint256)
func (_Token *TokenTransactor) MinePepe(opts *bind.TransactOpts, _seed *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "minePepe", _seed, _receiver)
}

// MinePepe is a paid mutator transaction binding the contract method 0x13aa48bf.
//
// Solidity: function minePepe(_seed uint256, _receiver address) returns(uint256)
func (_Token *TokenSession) MinePepe(_seed *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Token.Contract.MinePepe(&_Token.TransactOpts, _seed, _receiver)
}

// MinePepe is a paid mutator transaction binding the contract method 0x13aa48bf.
//
// Solidity: function minePepe(_seed uint256, _receiver address) returns(uint256)
func (_Token *TokenTransactorSession) MinePepe(_seed *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Token.Contract.MinePepe(&_Token.TransactOpts, _seed, _receiver)
}

// PepePremine is a paid mutator transaction binding the contract method 0x1977bd68.
//
// Solidity: function pepePremine(_amount uint256) returns()
func (_Token *TokenTransactor) PepePremine(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "pepePremine", _amount)
}

// PepePremine is a paid mutator transaction binding the contract method 0x1977bd68.
//
// Solidity: function pepePremine(_amount uint256) returns()
func (_Token *TokenSession) PepePremine(_amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.PepePremine(&_Token.TransactOpts, _amount)
}

// PepePremine is a paid mutator transaction binding the contract method 0x1977bd68.
//
// Solidity: function pepePremine(_amount uint256) returns()
func (_Token *TokenTransactorSession) PepePremine(_amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.PepePremine(&_Token.TransactOpts, _amount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Token *TokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Token *TokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _Token.Contract.RenounceOwnership(&_Token.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Token *TokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Token.Contract.RenounceOwnership(&_Token.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256) returns()
func (_Token *TokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256) returns()
func (_Token *TokenSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.SafeTransferFrom(&_Token.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(_from address, _to address, _tokenId uint256) returns()
func (_Token *TokenTransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.SafeTransferFrom(&_Token.TransactOpts, _from, _to, _tokenId)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_Token *TokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_Token *TokenSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _Token.Contract.SetApprovalForAll(&_Token.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(_operator address, _approved bool) returns()
func (_Token *TokenTransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _Token.Contract.SetApprovalForAll(&_Token.TransactOpts, _operator, _approved)
}

// SetMiner is a paid mutator transaction binding the contract method 0x9742ca46.
//
// Solidity: function setMiner(_miner address) returns()
func (_Token *TokenTransactor) SetMiner(opts *bind.TransactOpts, _miner common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setMiner", _miner)
}

// SetMiner is a paid mutator transaction binding the contract method 0x9742ca46.
//
// Solidity: function setMiner(_miner address) returns()
func (_Token *TokenSession) SetMiner(_miner common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetMiner(&_Token.TransactOpts, _miner)
}

// SetMiner is a paid mutator transaction binding the contract method 0x9742ca46.
//
// Solidity: function setMiner(_miner address) returns()
func (_Token *TokenTransactorSession) SetMiner(_miner common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetMiner(&_Token.TransactOpts, _miner)
}

// SetPepeName is a paid mutator transaction binding the contract method 0x228dff13.
//
// Solidity: function setPepeName(_pepeId uint256, _name bytes32) returns(bool)
func (_Token *TokenTransactor) SetPepeName(opts *bind.TransactOpts, _pepeId *big.Int, _name [32]byte) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setPepeName", _pepeId, _name)
}

// SetPepeName is a paid mutator transaction binding the contract method 0x228dff13.
//
// Solidity: function setPepeName(_pepeId uint256, _name bytes32) returns(bool)
func (_Token *TokenSession) SetPepeName(_pepeId *big.Int, _name [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetPepeName(&_Token.TransactOpts, _pepeId, _name)
}

// SetPepeName is a paid mutator transaction binding the contract method 0x228dff13.
//
// Solidity: function setPepeName(_pepeId uint256, _name bytes32) returns(bool)
func (_Token *TokenTransactorSession) SetPepeName(_pepeId *big.Int, _name [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetPepeName(&_Token.TransactOpts, _pepeId, _name)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _tokenId uint256) returns(bool)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", _to, _tokenId)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _tokenId uint256) returns(bool)
func (_Token *TokenSession) Transfer(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, _to, _tokenId)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _tokenId uint256) returns(bool)
func (_Token *TokenTransactorSession) Transfer(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, _to, _tokenId)
}

// TransferAndAuction is a paid mutator transaction binding the contract method 0x82cf2116.
//
// Solidity: function transferAndAuction(_pepeId uint256, _auction address, _beginPrice uint256, _endPrice uint256, _duration uint64) returns()
func (_Token *TokenTransactor) TransferAndAuction(opts *bind.TransactOpts, _pepeId *big.Int, _auction common.Address, _beginPrice *big.Int, _endPrice *big.Int, _duration uint64) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferAndAuction", _pepeId, _auction, _beginPrice, _endPrice, _duration)
}

// TransferAndAuction is a paid mutator transaction binding the contract method 0x82cf2116.
//
// Solidity: function transferAndAuction(_pepeId uint256, _auction address, _beginPrice uint256, _endPrice uint256, _duration uint64) returns()
func (_Token *TokenSession) TransferAndAuction(_pepeId *big.Int, _auction common.Address, _beginPrice *big.Int, _endPrice *big.Int, _duration uint64) (*types.Transaction, error) {
	return _Token.Contract.TransferAndAuction(&_Token.TransactOpts, _pepeId, _auction, _beginPrice, _endPrice, _duration)
}

// TransferAndAuction is a paid mutator transaction binding the contract method 0x82cf2116.
//
// Solidity: function transferAndAuction(_pepeId uint256, _auction address, _beginPrice uint256, _endPrice uint256, _duration uint64) returns()
func (_Token *TokenTransactorSession) TransferAndAuction(_pepeId *big.Int, _auction common.Address, _beginPrice *big.Int, _endPrice *big.Int, _duration uint64) (*types.Transaction, error) {
	return _Token.Contract.TransferAndAuction(&_Token.TransactOpts, _pepeId, _auction, _beginPrice, _endPrice, _duration)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns(bool)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns(bool)
func (_Token *TokenSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _tokenId uint256) returns(bool)
func (_Token *TokenTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, _from, _to, _tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Token *TokenTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Token *TokenSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Token.Contract.TransferOwnership(&_Token.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Token *TokenTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Token.Contract.TransferOwnership(&_Token.TransactOpts, _newOwner)
}

// Unhalt is a paid mutator transaction binding the contract method 0xcb3e64fd.
//
// Solidity: function unhalt() returns()
func (_Token *TokenTransactor) Unhalt(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "unhalt")
}

// Unhalt is a paid mutator transaction binding the contract method 0xcb3e64fd.
//
// Solidity: function unhalt() returns()
func (_Token *TokenSession) Unhalt() (*types.Transaction, error) {
	return _Token.Contract.Unhalt(&_Token.TransactOpts)
}

// Unhalt is a paid mutator transaction binding the contract method 0xcb3e64fd.
//
// Solidity: function unhalt() returns()
func (_Token *TokenTransactorSession) Unhalt() (*types.Transaction, error) {
	return _Token.Contract.Unhalt(&_Token.TransactOpts)
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(_owner indexed address, _approved indexed address, _tokenId uint256)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _approved []common.Address) (*TokenApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", _ownerRule, _approvedRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(_owner indexed address, _approved indexed address, _tokenId uint256)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, _owner []common.Address, _approved []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", _ownerRule, _approvedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Token contract.
type TokenApprovalForAllIterator struct {
	Event *TokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApprovalForAll represents a ApprovalForAll event raised by the Token contract.
type TokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(_owner indexed address, _operator indexed address, _approved bool)
func (_Token *TokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*TokenApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalForAllIterator{contract: _Token.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: e ApprovalForAll(_owner indexed address, _operator indexed address, _approved bool)
func (_Token *TokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TokenApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApprovalForAll)
				if err := _Token.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenOwnershipRenouncedIterator is returned from FilterOwnershipRenounced and is used to iterate over the raw logs and unpacked data for OwnershipRenounced events raised by the Token contract.
type TokenOwnershipRenouncedIterator struct {
	Event *TokenOwnershipRenounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenOwnershipRenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenOwnershipRenounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenOwnershipRenounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenOwnershipRenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenOwnershipRenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenOwnershipRenounced represents a OwnershipRenounced event raised by the Token contract.
type TokenOwnershipRenounced struct {
	PreviousOwner common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipRenounced is a free log retrieval operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_Token *TokenFilterer) FilterOwnershipRenounced(opts *bind.FilterOpts, previousOwner []common.Address) (*TokenOwnershipRenouncedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenOwnershipRenouncedIterator{contract: _Token.contract, event: "OwnershipRenounced", logs: logs, sub: sub}, nil
}

// WatchOwnershipRenounced is a free log subscription operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_Token *TokenFilterer) WatchOwnershipRenounced(opts *bind.WatchOpts, sink chan<- *TokenOwnershipRenounced, previousOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenOwnershipRenounced)
				if err := _Token.contract.UnpackLog(event, "OwnershipRenounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Token contract.
type TokenOwnershipTransferredIterator struct {
	Event *TokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenOwnershipTransferred represents a OwnershipTransferred event raised by the Token contract.
type TokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Token *TokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenOwnershipTransferredIterator{contract: _Token.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Token *TokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenOwnershipTransferred)
				if err := _Token.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenPepeBornIterator is returned from FilterPepeBorn and is used to iterate over the raw logs and unpacked data for PepeBorn events raised by the Token contract.
type TokenPepeBornIterator struct {
	Event *TokenPepeBorn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenPepeBornIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenPepeBorn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenPepeBorn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenPepeBornIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenPepeBornIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenPepeBorn represents a PepeBorn event raised by the Token contract.
type TokenPepeBorn struct {
	Mother *big.Int
	Father *big.Int
	PepeId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPepeBorn is a free log retrieval operation binding the contract event 0x160403841b73fe58236181ab476e17f2836a5b4aa8a570d9f1baf4b6ed61a38a.
//
// Solidity: e PepeBorn(mother indexed uint256, father indexed uint256, pepeId indexed uint256)
func (_Token *TokenFilterer) FilterPepeBorn(opts *bind.FilterOpts, mother []*big.Int, father []*big.Int, pepeId []*big.Int) (*TokenPepeBornIterator, error) {

	var motherRule []interface{}
	for _, motherItem := range mother {
		motherRule = append(motherRule, motherItem)
	}
	var fatherRule []interface{}
	for _, fatherItem := range father {
		fatherRule = append(fatherRule, fatherItem)
	}
	var pepeIdRule []interface{}
	for _, pepeIdItem := range pepeId {
		pepeIdRule = append(pepeIdRule, pepeIdItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "PepeBorn", motherRule, fatherRule, pepeIdRule)
	if err != nil {
		return nil, err
	}
	return &TokenPepeBornIterator{contract: _Token.contract, event: "PepeBorn", logs: logs, sub: sub}, nil
}

// WatchPepeBorn is a free log subscription operation binding the contract event 0x160403841b73fe58236181ab476e17f2836a5b4aa8a570d9f1baf4b6ed61a38a.
//
// Solidity: e PepeBorn(mother indexed uint256, father indexed uint256, pepeId indexed uint256)
func (_Token *TokenFilterer) WatchPepeBorn(opts *bind.WatchOpts, sink chan<- *TokenPepeBorn, mother []*big.Int, father []*big.Int, pepeId []*big.Int) (event.Subscription, error) {

	var motherRule []interface{}
	for _, motherItem := range mother {
		motherRule = append(motherRule, motherItem)
	}
	var fatherRule []interface{}
	for _, fatherItem := range father {
		fatherRule = append(fatherRule, fatherItem)
	}
	var pepeIdRule []interface{}
	for _, pepeIdItem := range pepeId {
		pepeIdRule = append(pepeIdRule, pepeIdItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "PepeBorn", motherRule, fatherRule, pepeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenPepeBorn)
				if err := _Token.contract.UnpackLog(event, "PepeBorn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenPepeNamedIterator is returned from FilterPepeNamed and is used to iterate over the raw logs and unpacked data for PepeNamed events raised by the Token contract.
type TokenPepeNamedIterator struct {
	Event *TokenPepeNamed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenPepeNamedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenPepeNamed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenPepeNamed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenPepeNamedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenPepeNamedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenPepeNamed represents a PepeNamed event raised by the Token contract.
type TokenPepeNamed struct {
	PepeId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPepeNamed is a free log retrieval operation binding the contract event 0x5a8858069902ead8e61944d06d7de6818a0dd09b668447431ac1501baa5e8ef8.
//
// Solidity: e PepeNamed(pepeId indexed uint256)
func (_Token *TokenFilterer) FilterPepeNamed(opts *bind.FilterOpts, pepeId []*big.Int) (*TokenPepeNamedIterator, error) {

	var pepeIdRule []interface{}
	for _, pepeIdItem := range pepeId {
		pepeIdRule = append(pepeIdRule, pepeIdItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "PepeNamed", pepeIdRule)
	if err != nil {
		return nil, err
	}
	return &TokenPepeNamedIterator{contract: _Token.contract, event: "PepeNamed", logs: logs, sub: sub}, nil
}

// WatchPepeNamed is a free log subscription operation binding the contract event 0x5a8858069902ead8e61944d06d7de6818a0dd09b668447431ac1501baa5e8ef8.
//
// Solidity: e PepeNamed(pepeId indexed uint256)
func (_Token *TokenFilterer) WatchPepeNamed(opts *bind.WatchOpts, sink chan<- *TokenPepeNamed, pepeId []*big.Int) (event.Subscription, error) {

	var pepeIdRule []interface{}
	for _, pepeIdItem := range pepeId {
		pepeIdRule = append(pepeIdRule, pepeIdItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "PepeNamed", pepeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenPepeNamed)
				if err := _Token.contract.UnpackLog(event, "PepeNamed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(_from indexed address, _to indexed address, _tokenId indexed uint256)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*TokenTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(_from indexed address, _to indexed address, _tokenId indexed uint256)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenUserNamedIterator is returned from FilterUserNamed and is used to iterate over the raw logs and unpacked data for UserNamed events raised by the Token contract.
type TokenUserNamedIterator struct {
	Event *TokenUserNamed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenUserNamedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenUserNamed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenUserNamed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenUserNamedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenUserNamedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenUserNamed represents a UserNamed event raised by the Token contract.
type TokenUserNamed struct {
	User     common.Address
	Username [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUserNamed is a free log retrieval operation binding the contract event 0x43c1ac38b68f3a24742fba8f0826c9fcf340d41f123872fa3175164d117e25af.
//
// Solidity: e UserNamed(user indexed address, username indexed bytes32)
func (_Token *TokenFilterer) FilterUserNamed(opts *bind.FilterOpts, user []common.Address, username [][32]byte) (*TokenUserNamedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "UserNamed", userRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &TokenUserNamedIterator{contract: _Token.contract, event: "UserNamed", logs: logs, sub: sub}, nil
}

// WatchUserNamed is a free log subscription operation binding the contract event 0x43c1ac38b68f3a24742fba8f0826c9fcf340d41f123872fa3175164d117e25af.
//
// Solidity: e UserNamed(user indexed address, username indexed bytes32)
func (_Token *TokenFilterer) WatchUserNamed(opts *bind.WatchOpts, sink chan<- *TokenUserNamed, user []common.Address, username [][32]byte) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "UserNamed", userRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenUserNamed)
				if err := _Token.contract.UnpackLog(event, "UserNamed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
